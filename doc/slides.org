#+title: 3rd Session: a working program
#+author: Pau Cervera & Cristobal Garcia
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+OPTIONS: num:nil


* Intro

To implement a small single-user TO-DO list as a web application. To be able
to focus on learning, we will use the provided skeleton app and work in
_fill-in-the-blanks_ mode.

** Repo structure

   The [[https://github.com/capside-functional-nomads/bartleby][repo]] has some intereting tags

   - =bare-bones= web infrastructure in place. No features.
   - =starting-point= sample features implemented.

* Recap: LISP, clojure syntax
  
** Function application

  #+begin_src clojure :eval never
  ;; function application
  (+ 1 1)
  ;;=> 2

  (first '(1 2 3))
  ;;=> 1
  #+end_src

** Conditionals

  #+begin_src clojure :eval never
    (> 2 1)
    ;;=> true
    (> 2 2)
    ;;=> false
    (nil? 1)
    ;;=> false
    (nil? nil)
    ;;=> true
    (if (nil? 1) "1 is nil!" "Good!")
    ;;=>"Good!"
    (when (nil? 1) "1 is nil!")
    ;;=>nil
  #+end_src

** Lists
  
  #+begin_src clojure :eval never
  '(1 2 3)
  (first '(1 2 3))
  ;;=> 1
  (rest '(1 2 3))
  ;;=> (2 3)
  (conj '(1 2) 3)
  ;;=> (3 1 2)
  #+end_src

** Vectors

  #+begin_src clojure :eval never
  [1 2 3]
  (first [1 2 3])
  ;;=> 1
  (rest [1 2 3])
  ;;=> [2 3]
  (conj [1 2] 3)
  ;;=> [1 2 3]
  #+end_src

** Maps

  #+begin_src clojure :eval never
  {:a 1 :b "2"}
  (:a {:a 1 :b "2"})
  ;;=>1
  (:c {:a 1 :b "2"})
  ;;=>nil
  (conj {:a 1 :b "2"} [:c 'tres])
  ;;=>{:a 1 :b "2" :c tres}
  #+end_src

** Defining functions

  #+begin_src clojure :eval never
    (defn add-2
      [x]
      (+ x 2))
  #+end_src

** Lexical scoping

   - In clojure we normally do not use _global_ names to refer to values
   - Functions use lexical contexts to define auxiliar symbols

  #+begin_src clojure :eval never
    (defn strange-math-op
      [x y]
      (let [double-x (* 2 x)
            triple-y (* 3 y)]
        (+ double-x triple-y)))
  #+end_src

** Destructuring

   #+begin_src clojure :eval never
     (defn swap-pair
       [pair]
       (let [f (first pair)
             s (second pair)]
         [s f]))

     (defn swap-pair-2
       [pair]
       (let [[x y] pair]
         [y x]))

     (defn swap-pair-3
       [[x y]]
       [y x])
   #+end_src

** Destructuring II

   #+begin_src clojure :eval never
     (let [{x :a} {:a 1}]
       x)

     ;;=> 1
   #+end_src

* Namespaces

  - Functions belong to namespaces
  - Default namespace =user=

   #+begin_src clojure :eval never
     ;; show-ns
     ,*ns*
     ;; change ns and define function
     (ns new-ns)

     (defn msg
       [x]
       (str "This is a message: " msg))

     (ns user)
     (new-ns/msg "hey!!")
     ;;=>"Tis is a message: hey!!"


   #+end_src

** Including symbols from another namespace

   #+begin_src clojure :eval never
     ;; from REPL

     (require '[clojure.string :as string])
     (string/reverse "hola")
     ;;=>"aloh"
     (require '[clojure.string :refer [reverse]])
     (reverse "hola")
     ;;=>"aloh"
   #+end_src

** Namespaces and files

   
   #+begin_src clojure :eval never
     ;; in the bartleby project, the src root is in src
     ;; the bartleby.core namespace is in src/bartleby/core.clj

     (ns bartleby.core
       (:require [clojure.string :as string]))

     ;; string/reverse is available in the whole namespace
     ;; notice the slightly different syntax

   #+end_src

   - Namespaces with dash map to files with underscore
   


* Setup

  #+begin_src bash :eval never
    cd docker
    docker-compose up -d
    docker-compose exec database psql -U pgadmin
  #+end_src

  #+begin_src sql :eval never
    create user bartleby with login encrypted password 'bartleby';
    create database bartleby with owner=bartleby encoding=utf8;
  #+end_src

* Coding

  
  #+begin_src bash :eval never

  cp config/dev/config.edn.sample config/dev/config.edn
  lein repl
  (go)
  (stop)

  #+end_src

* Frontend working environment
  To start the frontend working environment, open another shell
  and, while the server is running (see previous point), start
  figwheel with the following command:

  #+begin_src bash :eval never

  lein with-profile dev figwheel

  #+end_src

  At this point, figwheel will compile all cljs code to a JavaScript
  and put it on the js folder under `resources/public/`. Now, point
  your browser to [http://localhost:8080](http://localhost:8080) and
  the repl will become active.

  Test the connection between the browser and the repl with:

  #+begin_src clojure :eval never

  dev:cljs.user=> (js/alert "I would prefer not to")

  #+end_src

  this whill cause an alert pop up in the browser. Open the developer 
  tools and try:

  #+begin_src clojure :eval never

  dev:cljs.user=> (.info js/console "I would prefer not to")

  #+end_src

** Change the frontend

   Now, let's change the frontend code. Change the function `main-view` from *core.cljs*
   to:

  #+begin_src clojure :eval never

  (defn main-view []
  [:div
   [:h1 "Bartleby, the scrivener]])

  #+end_src

  you will see the changes immediately applied to the browser.

* Let's review some of the code

  - checkout the =bare-bones= tag
  - We will review some code
  - Go to the =starting-point= tag
  - We will start from there

* And that was all

  Thank you!
